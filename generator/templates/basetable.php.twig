<?php
namespace {{ namespace }}\TableGateways\Base;
use \Zenderator\Abstracts\TableGateway as AbstractTableGateway;
use \Zenderator\Abstracts\Model;
use \{{ namespace }}\TableGateways;
use \{{ namespace }}\Models;
use \Zend\Db\Adapter\AdapterInterface;
use \Zend\Db\ResultSet\ResultSet;

{% include '_overwrite_warning.twig' %}

abstract class Base{{ class_name }}TableGateway extends AbstractTableGateway
{
    protected $table = '{{ table }}';

    protected $model = '{{ namespace_model }}';

    /** @var \Faker\Generator */
    protected $faker;

{% for object in related_objects|sort %}
    /** @var TableGateways\{{ object.remote_model_class }}TableGateway */
    protected ${{ object.remote_model_variable }}TableGateway;
{% endfor %}

    /**
     * AbstractTableGateway constructor.
     *
{% for object in related_objects|sort %}
     * @param TableGateways\{{ object.remote_model_class }}TableGateway ${{ object.remote_model_variable }}TableGateway,
{% endfor %}
     * @param AdapterInterface $adapter
     */
    public function __construct(
{% for object in related_objects|sort %}
        TableGateways\{{ object.remote_model_class }}TableGateway ${{ object.remote_model_variable }}TableGateway,
{% endfor %}
        \Faker\Generator $faker,
        AdapterInterface $adapter
    )
    {
{% for object in related_objects|sort %}
        $this->{{ object.remote_model_variable }}TableGateway = ${{ object.remote_model_variable }}TableGateway;
{% endfor %}
        $this->faker = $faker;

        $resultSetPrototype = new ResultSet(ResultSet::TYPE_ARRAYOBJECT, new $this->model);
        return parent::__construct($this->table, $adapter, null, $resultSetPrototype);
    }

    public function getNewMockModelInstance()
    {
{% for object in related_objects|sort %}
      ${{ object.remote_model_variable }}ExampleObject = $this->{{ object.remote_model_variable }}TableGateway->getNewMockModelInstance();
      $this->{{ object.remote_model_variable }}TableGateway->save(${{ object.remote_model_variable }}ExampleObject);

{% endfor %}

      $new{{ class_name }}Data = [
{% for column in columns|sort %}
        // Type = {{ column.type }} PHPType = {{ column.phptype }}
{% if 'constraints' in column|keys %}
        '{{ column.field }}' => $this->{{ column.constraints.remote_model_variable }}TableGateway->getNewMockModelInstance()->save()->get{{ column.constraints.remote_model_key_get_function }}(),
{% elseif column.phptype == 'int' and 'max_field_length' in column|keys %}
        '{{ column.field }}' => $this->faker->numberBetween(1, {{ 10 ** column.max_length - 1 < column.max_field_length ? 10 ** column.max_length - 1 : column.max_field_length}}),
{% elseif column.phptype == 'int' %}
        '{{ column.field }}' => $this->faker->numberBetween(1, {{ 10 ** column.max_length - 2 }}),
{% elseif column.type == 'enum' and column.phptype == 'string' %}
        '{{ column.field }}' => '{{ column.permitted_values[0] }}',
{% elseif column.type == 'datetime' and column.phptype == 'string' %}
        '{{ column.field }}' => $this->faker->dateTime()->format("Y-m-d H:i:s"), // @todo: Make datetime fields accept DateTime objects instead of strings.
{% elseif column.phptype == 'float' %}
        '{{ column.field }}' => $this->faker->randomFloat({{ column.max_decimal_places }}, -5, 5),
{% elseif column.max_length %}
        '{{ column.field }}' => substr($this->faker->text({{ column.max_length < 50000 ? column.max_length : 50000 }} >= 5 ? {{ column.max_length < 50000 ? column.max_length : 50000 }} : 5), 0, {{ column.max_length < 50000 ? column.max_length : 50000 }}),
{% else %}
        '{{ column.field }}' => $this->faker->word,
{% endif %}
{% endfor %}
      ];
      $new{{ class_name }} = $this->getNewModelInstance($new{{ class_name }}Data);
      return $new{{ class_name }};
    }

    /**
     * @param array $data
     * @return Models\{{ class_name }}Model
     */
    public function getNewModelInstance(array $data = [])
    {
        return parent::getNewModelInstance($data);
    }

    /**
     * @param Models\{{ class_name }}Model $model
     * @return Models\{{ class_name }}Model
     */
    public function save(Model $model)
    {
        return parent::save($model);
    }
}