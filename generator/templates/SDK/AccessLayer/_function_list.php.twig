{% for property in route.properties %}
    const FIELD_{{ property|transform_studly_to_screamingsnake }} = '{{ property }}';
{% endfor %}

    /**
     * @param $filter Filter instance
     * @return null|Models\{{ route.singular }}Model[]
     * @throws Exceptions\SDKException
     **/
    public function {{ route.function }}(Filter $filter = null) : ?array
    {
        /** @var $response \GuzzleHttp\Psr7\Response */
        $endpoint = "{{ route.pattern }}";
        $method = "{{ route.method }}";
        $headers = [
            'Filter' => $filter instanceof Filter ? $filter->getHeaderJson() : null ,
            'Accept' => 'application/json',
        ];

        $response = $this->request(
            $method,
            $endpoint,
            [
                'headers' => $headers
            ]
        );
        $body = $response->getBody()->getContents();
        if(json_decode($body) === null){
            throw new Exceptions\SDKException("Response from API ({$endpoint}) was not expected JSON: " . var_export($body, true));
        }
        $body = json_decode($body, true);

        if (strtolower($body['Status']) == strtolower('Okay')) {
            if(!isset($body['{{ route.plural }}'])){
                // @todo make exception less generic - MB
                throw new Exceptions\SDKException(
                    "Could not find element '{{ route.plural }}' in response from API.\n" .
                    "Endpoint: {$endpoint}\n" .
                    "Method: {$method}\n" .
                    "Available Keys were: ['" . implode("', '", array_keys($body)) . "'].\n"
                );
            }
            return $this->hydrate($body['{{ route.plural }}']);
        }
        return null;
    }

