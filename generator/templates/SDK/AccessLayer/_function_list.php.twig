    /**
     * @param $limit integer The maximum number of {{ route.singular }}Model to get
     * @param $offset integer Get items starting at the nth item.
     * @return Models\{{ route.singular }}Model[]
     * @throws Exceptions\SDKException
     **/
    public function {{ route.function }}($limit = null, $offset = null)
    {
        /** @var $response \GuzzleHttp\Psr7\Response */
        $endpoint = "{{ route.pattern }}";
        $method = "{{ route.method }}";
        $filterArray = [
            'limit' => $limit,
            'offset' => $offset,
        ];
        $response = $this->request(
            $method,
            $endpoint,
            [
                'headers' => [
                    'filter' => json_encode($filterArray),
                ]
            ]
        );
        $body = $response->getBody()->getContents();
        if(json_decode($body) === null){
            throw new Exceptions\SDKException("Response from API ({$endpoint}) was not expected JSON: " . var_export($body, true));
        }
        $body = json_decode($body, true);
        if(!isset($body['{{ route.plural }}'])){
            // @todo make exception less generic - MB
            throw new Exceptions\SDKException(
                "Could not find element '{{ route.plural }}' in response from API.\n" .
                "Endpoint: {$endpoint}\n" .
                "Method: {$method}\n" .
                "Available Keys were: ['" . implode("', '", array_keys($body)) . "'].\n"
            );
        }
        return $this->hydrate($body['{{ route.plural }}']);
    }

