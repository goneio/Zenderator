    /**
     * @return Models\{{ route.singular }}Model
     **/
    public function {{ route.function }}($propertyArray)
    {
        /** @var $response \GuzzleHttp\Psr7\Response */
        $endpoint = "{{ route.pattern }}";
        $method = "{{ route.method }}";
        try{
            $response = $this->request(
                $method,
                $endpoint,
                [
                    'body' => json_encode($propertyArray),

                ]
            );
            $body = $response->getBody()->getContents();
            if(json_decode($body) === null){
                throw new Exceptions\SDKException("Response from API ({$endpoint}) was not expected JSON: " . var_export($body, true));
            }
            $body = json_decode($body, true);
            return $this->hydrate($body['{{ route.singular }}']);
        }catch(\GuzzleHttp\Exception\ServerException $serverException){
            $requestBody = $serverException->getRequest()->getBody()->getContents();
            $responseBody = $serverException->getResponse()->getBody()->getContents();
            throw new Exceptions\SDKException("Server error: {$method} {$endpoint}\nRequest:\n{$requestBody}Response:\n{$responseBody}");
        }catch(\GuzzleHttp\Exception\ClientException $clientException){
            $requestBody  = $clientException->getRequest()->getBody()->getContents();
            $responseBody = $clientException->getResponse()->getBody()->getContents();
            throw new Exceptions\SDKException("Server error:  {$method} {$endpoint}\nRequest:\n{$requestBody}Response:\n{$responseBody}");
        }
    }

    /**
     * @return Models\{{ route.singular }}Model;
     */
    public function {{ route.function }}FromObject(Models\{{ route.singular }}Model ${{ route.singular }})
    {
        return $this->{{ route.function }}(
            ${{ route.singular }}->__toArray()
        );
    }

