<?php
namespace Segura\SDK\{{ app_name }}\Abstracts;

use GuzzleHttp\Client as GuzzleClient;
use Psr\Http\Message\ResponseInterface;
use Segura\SDK\{{ app_name }}\Client as SDKClient;
use Segura\SDK\{{ app_name }}\Exceptions;

abstract class AbstractAccessLayer
{
    /** @var GuzzleClient */
    protected $guzzleClient;

    /** @var SDKClient **/
    protected $sdkClient;

    protected $baseUrl = "{{ default_base_url }}";

    /**
     * AbstractAccessLayer constructor.
     * @param GuzzleClient $guzzleClient
     * @param SDKClient $sdkClient
     */
    public function __construct(
        GuzzleClient $guzzleClient,
        SDKClient $sdkClient
    ){
        $this->guzzleClient = $guzzleClient;
        $this->sdkClient = $sdkClient;
        $this->setBaseUrl($sdkClient->getBaseUrl());
    }

    /**
     * Set the Base URL for requests.
     * @param string $baseUrl
     * @returns self
     */
    public function setBaseUrl($baseUrl)
    {
        $this->baseUrl = $baseUrl;
        return $this;
    }

    public function getBaseUrl()
    {
        return $this->baseUrl;
    }

    /**
    * @param string $method
    * @param string $endpoint
    * @param array  $options
    *
    * @return mixed|ResponseInterface
    *
    * @throws Exceptions\SDKException
    */
    protected function request(
        $method = "GET",
        $endpoint = "/",
        $options = []
    ) {
        $endpoint = ltrim($endpoint, "/");
        $url = "{$this->baseUrl}/{$endpoint}";
        try{
            return $this->guzzleClient->request(
                $method,
                $url,
                array_merge_recursive(
                    [
                        'headers' => [
                            'User-Agent' => 'lib{{ app_name }}/dev-master',
                            'Accept'     => 'application/json',
                            'Content-Type' => 'application/json',
                        ]
                    ],
                    $options
                )
            );
        }catch(\GuzzleHttp\Exception\ConnectException $connectException){
            throw new Exceptions\SDKException(
                "Method: {$method}\n" .
                "URL: {$url}\n" .
                $connectException->getMessage()
            );
        }
    }

    protected function replaceUrlElements(string $endpoint, array $replacements = null){
        if (count($replacements) > 0) {
            foreach($replacements as $key => $value){
                $endpoint = str_replace('{' . $key . '}', $value, $endpoint);
            }
        }
        return $endpoint;
    }
}
