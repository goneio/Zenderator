<?php
namespace {{ namespace }}\Models\Base;
use \{{ app_container }} as App;
use \{{ namespace }}\{{ namespace }};
use \Segura\AppCore\Abstracts\Model as AbstractModel;
use \{{ namespace }}\Services;
use \{{ namespace }}\Models;
use \{{ namespace }}\TableGateways;
use \{{ namespace }}\Models\{{ class_name }}Model;

{% include '_overwrite_warning.twig' %}

abstract class Base{{ class_name }}Model extends AbstractModel
{

{% if primary_keys %}
    protected $_primary_keys = ['{{ primary_keys|join('\', \'')|raw }}'];
{% endif %}

{% for column in columns %}
{% if column.default_value %}
    protected ${{ column.getField }} = '{{ column.default_value }}';
{% else %}
    protected ${{ column.getField }};
{% endif %}
{% endfor %}

    //@todo Rejig this to use an array called $original instead of lots of elements. Its annoying as it stands. -MB
{% for column in columns %}
    protected $original_{{ column.getField }};
{% endfor %}

    /**
     * @returns {{ class_name }}Model
     */
    static public function factory()
    {
        return parent::factory();
    }

{% for column in columns %}
    /**
     * @returns {{ column.phptype }}
     */
    public function get{{ column.getPropertyFunction }}() {% if column.phptype %}{# Sadly can't use this until nullable return types turns up. : {{ column.phptype }} #}{% endif %}
    {
        return $this->{{ column.getField }};
    }

    /**
     * @returns {{ class_name }}Model
     */
    public function set{{ column.getPropertyFunction }}({{ column.phptype }} ${{ column.getField }} = null)
    {
        $this->{{ column.getField }} = ${{ column.getField }};
        return $this;
    }

{% endfor %}

    /*****************************************************
     * "Referenced To" Remote Constraint Object Fetchers *
     *****************************************************/
{% for related_object in related_objects %}
    /**
     * @returns Models\{{ related_object.getRemoteClass }}Model
     */
    public function fetch{{ related_object.getRemoteClass }}Object() : Models\{{ related_object.getRemoteClass }}Model
    {
        /** @var ${{ related_object.getRemoteClass }}Service Services\{{ related_object.getRemoteClass }}Service */
        ${{ related_object.getRemoteClass }}Service = App::Container()->get(Services\{{ related_object.getRemoteClass }}Service::class);
{% if related_object.getRemoteBoundColumn == 'id' %}
        return ${{ related_object.getRemoteClass }}Service->getById($this->{{ related_object.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ related_object.getRemoteClass }}Service->getByField('{{ related_object.getRemoteBoundColumn }}', $this->{{ column.getLocalBoundColumnGetter }}());
{% endif %}
    }

{% endfor %}

{% if remote_objects %}
    /*****************************************************
     * "Referenced By" Remote Constraint Object Fetchers *
     *****************************************************/
{% for remote_object in remote_objects %}
    public function fetch{{ remote_object.getLocalClass }}Objects() : Models\{{ remote_object.getLocalClass }}Model {
        ${{ remote_object.local_model_class }}Service = App::Container()->get(Services\{{ remote_object.getLocalClass }}Service::class);
{% if remote_object.local_model_key == 'id' %}
        return ${{ remote_object.local_model_class }}Service->getById($this->{{ column.getLocalBoundColumnGetter }}());
{% else %}
        return ${{ remote_object.local_model_class }}Service->getByField('{{ remote_object.getLocalBoundColumn }}', $this->{{ remote_object.getRemoteBoundColumnGetter }}());
{% endif %}
    }

{% endfor %}
{% endif %}

    /**
     * @returns {{ class_name }}Model
     */
    public function save()
    {
        /** @var $tableGateway TableGateways\{{ class_name }}TableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);
        return $tableGateway->save($this);
    }

    /**
     * Destroy the current record.
     *
     * @return int Number of affected rows.
     */
    public function destroy()
    {
        /** @var $tableGateway TableGateways\{{ class_name }}TableGateway */
        $tableGateway = App::Container()->get(TableGateways\{{ class_name }}TableGateway::class);
        return $tableGateway->delete($this->getPrimaryKeys());
    }

    /**
     * Provides an array of all properties in this model.
     * @returns array
     */
    public function getListOfProperties()
    {
        return [
{% for column in columns %}
            '{{ column.getField }}',
{% endfor %}
        ];
    }
}