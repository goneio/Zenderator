<?php
namespace {{ namespace }}\Test\Models;

use \{{ namespace }}\TableGateways\{{ class_name }}TableGateway;
use \{{ namespace }}\Models\{{ class_name }}Model;
use \{{ namespace }}\Models;

class {{ class_name }}Test extends \Segura\AppCore\Test\BaseTestCase
{
    protected $testInstance;

    public function __setUp()
    {
        parent::__setUp();
    }

    public function __tearDown()
    {
        parent::__tearDown();
    }

    public function testExchangeArray()
    {
        $data = [];
{% for column in columns %}
{% if column.phptype == 'int' or column.phptype == 'float' %}
        $data['{{ column.field }}'] = self::getFaker()->randomDigitNotNull;
{% else %}
        $data['{{ column.field }}'] = self::getFaker()->word;
{% endif %}
{% endfor %}
        $this->testInstance = new {{ class_name }}Model($data);
{% for column in columns %}
        $this->assertEquals($data['{{ column.getField }}'], $this->testInstance->get{{ column.getPropertyFunction }}());
{% endfor %}
    }

    public function testGetRandom()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get(\{{ namespace }}\TableGateways\{{ class_name }}TableGateway::class);

        // If there is no data in the table, create some.
        if($table->getCount() == 0){
            $dummyObject = $table->getNewMockModelInstance();
            $table->save($dummyObject);
        }

        ${{ class_name|lower }} = $table->fetchRandom();
        $this->assertTrue(${{ class_name|lower }} instanceof {{ class_name }}Model, "Make sure that \"" . get_class(${{ class_name|lower }}) . "\" matches \"{{ class_name }}Model\"") ;

        return ${{ class_name|lower }};
    }

    public function testNewMockModelInstance()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get(\{{ namespace }}\TableGateways\{{ class_name }}TableGateway::class);
        $newMockModel = $table->getNewMockModelInstance();

        $this->assertEquals('{{ namespace }}\Models\{{ class_name }}Model', get_class($newMockModel));

        return $newMockModel;
    }

    public function testNewModelFactory()
    {
        $instance = {{ class_name }}Model::factory();

        $this->assertEquals('{{ namespace }}\Models\{{ class_name }}Model', get_class($instance));
    }

    public function testSave()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get(\{{ namespace }}\TableGateways\{{ class_name }}TableGateway::class);
        /** @var Models\{{ class_name }}Model $mockModel */
        /** @var Models\{{ class_name }}Model $savedModel */
        $mockModel = $table->getNewMockModelInstance();
        $savedModel = $mockModel->save();
        $this->assertEquals($mockModel, $savedModel);
 }

{% if columns.id is defined %}
    /**
     * @depends testGetRandom
     */
    public function testGetById({{ class_name }}Model ${{ variable_name }})
    {
        /** @var {{ variable_name }}TableGateway $table */
        $table = $this->getDIContainer()->get(\{{ namespace }}\TableGateways\{{ class_name }}TableGateway::class);
        $results = $table->select(['id' => ${{ variable_name }}->getId()]);
        ${{ variable_name }}Row = $results->current();
        $this->assertTrue(${{ variable_name }}Row instanceof {{ class_name }}Model);
    }
{% endif %}

    /**
     * @depends testGetRandom
     */
    public function testSettersAndGetters({{ class_name }}Model ${{ variable_name }})
    {
{% for column in columns %}
        $this->assertTrue(method_exists(${{ variable_name }}, "get{{ column.field }}"));
        $this->assertTrue(method_exists(${{ variable_name }}, "set{{ column.field }}"));
{% endfor %}

        $test{{ class_name }} = new {{ class_name }}Model();
{% for column in columns %}
{% if column.phptype == 'int' or column.phptype == 'float' %}
        $input = self::getFaker()->randomDigitNotNull;
{% else %}
        $input = self::getFaker()->word;
{% endif %}
        $test{{ class_name }}->set{{ column.field }}($input);
        $this->assertEquals($input, $test{{ class_name }}->get{{ column.field }}());
{% endfor %}
    }

{% for column in columns %}
{% if 'constraints' in column|keys %}
    /**
    * @depends testGetRandom
    */
    public function testFetch{{ column.field }}Object({{ class_name }}Model ${{ class_name|lower }})
    {
        $this->assertTrue(method_exists(${{ class_name|lower }}, "fetch{{ column.field }}Object"));

        ${{ column.field }}Object = ${{ class_name|lower }}->fetch{{ column.field }}Object();
        $this->assertEquals(Models\{{ column.constraints.remote_model_class }}Model::class, get_class(${{ column.field }}Object));
    }
{% endif %}
{% endfor %}

{% if autoincrement_parameters %}
    public function testAutoincrementedIdIsApplied()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get(\{{ namespace }}\TableGateways\{{ class_name }}TableGateway::class);
        $newMockModel = $table->getNewMockModelInstance();

        // Set primary keys to null.
{% for primary_parameter in autoincrement_parameters %}
        $newMockModel->set{{ primary_parameter }}(null);
{% endfor %}

        // Save the object
        $newMockModel->save();

        // verify that the AI keys have been set.
{% for primary_parameter in primary_parameters %}
        $this->assertNotNull($newMockModel->get{{ primary_parameter }}());
{% endfor %}
    }
{% endif %}

}
