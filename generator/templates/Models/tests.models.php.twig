<?php
namespace {{ namespace }}\Test\Models\Generated;

use \{{ namespace }}\TableGateways;
use \{{ namespace }}\TableGateways\{{ class_name }}TableGateway;
use \{{ namespace }}\Models\{{ class_name }}Model;
use \{{ namespace }}\Models;

class {{ class_name }}Test extends \Segura\AppCore\Test\BaseTestCase
{
    /** @var {{ class_name }}TableGateway */
    protected $testTableGateway;

    /** @var {{ class_name }}Model */
    protected $testInstance;

    public function setUp()
    {
        parent::setUp();
        $this->testTableGateway = $this->getDIContainer()->get({{ class_name }}TableGateway::class);
        $this->testInstance = $this->testTableGateway->getNewMockModelInstance();

    }

    public function testExchangeArray()
    {
        $data = [];
{% for column in columns %}
{% if column.phptype == 'int' or column.phptype == 'float' %}
        $data['{{ column.field }}'] = self::getFaker()->randomDigitNotNull;
{% else %}
        $data['{{ column.field }}'] = self::getFaker()->word;
{% endif %}
{% endfor %}
        $this->testInstance = new {{ class_name }}Model($data);
{% for column in columns %}
        $this->assertEquals($data['{{ column.getField }}'], $this->testInstance->get{{ column.getPropertyFunction }}());
{% endfor %}
    }

    public function testGetRandom()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class_name }}TableGateway::class);

        // If there is no data in the table, create some.
        if($table->getCount() == 0){
            $dummyObject = $table->getNewMockModelInstance();
            $table->save($dummyObject);
        }

        ${{ class_name|lower }} = $table->fetchRandom();
        $this->assertTrue(${{ class_name|lower }} instanceof {{ class_name }}Model, "Make sure that \"" . get_class(${{ class_name|lower }}) . "\" matches \"{{ class_name }}Model\"") ;

        return ${{ class_name|lower }};
    }

    public function testNewMockModelInstance()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class_name }}TableGateway::class);
        $newMockModel = $table->getNewMockModelInstance();

        $this->assertInstanceOf(
            Models\{{ class_name }}Model::class,
            $newMockModel
            );

        return $newMockModel;
    }

    public function testNewModelFactory()
    {
        $instance = {{ class_name }}Model::factory();

        $this->assertInstanceOf(
            Models\{{ class_name }}Model::class,
            $instance
        );
    }

    public function testSave()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class_name }}TableGateway::class);
        /** @var Models\{{ class_name }}Model $mockModel */
        /** @var Models\{{ class_name }}Model $savedModel */
        $mockModel = $table->getNewMockModelInstance();
        $savedModel = $mockModel->save();

        $mockModelArray = $mockModel->__toArray();
        $savedModelArray = $savedModel->__toArray();

        // Remove auto increments from test.
        foreach($mockModel->getAutoIncrementKeys() as $autoIncrementKey => $discard){
            foreach($mockModelArray as $key => $value){
                if(strtolower($key) == strtolower($autoIncrementKey)){
                    unset($mockModelArray[$key]);
                    unset($savedModelArray[$key]);
                }
            }
        }

{% for column in columns|sort %}
{% if column.getDbType == 'json' %}
        // Reserialize JSON fields
        $mockModelArray['{{ column.getPropertyFunction }}']  = json_encode(json_decode($mockModelArray['{{ column.getPropertyFunction }}'],true), JSON_PRETTY_PRINT);
        $savedModelArray['{{ column.getPropertyFunction }}'] = json_encode(json_decode($savedModelArray['{{ column.getPropertyFunction }}'],true), JSON_PRETTY_PRINT);
{% endif %}
{% endfor %}

        $this->assertEquals($mockModelArray, $savedModelArray);
    }

{% if columns.id is defined %}
    /**
     * @depends testGetRandom
     */
    public function testGetById({{ class_name }}Model ${{ variable_name }})
    {
        /** @var {{ variable_name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class_name }}TableGateway::class);
        $results = $table->select(['id' => ${{ variable_name }}->getId()]);
        ${{ variable_name }}Row = $results->current();
        $this->assertTrue(${{ variable_name }}Row instanceof {{ class_name }}Model);
    }
{% endif %}

    /**
     * @depends testGetRandom
     */
    public function testSettersAndGetters({{ class_name }}Model ${{ variable_name }})
    {
{% for column in columns %}
        $this->assertTrue(method_exists(${{ variable_name }}, "get{{ column.field }}"));
        $this->assertTrue(method_exists(${{ variable_name }}, "set{{ column.field }}"));
{% endfor %}

        $test{{ class_name }} = new {{ class_name }}Model();
{% for column in columns %}
{% if column.phptype == 'int' or column.phptype == 'float' %}
        $input = self::getFaker()->randomDigitNotNull;
{% else %}
        $input = self::getFaker()->word;
{% endif %}
        $test{{ class_name }}->set{{ column.field }}($input);
        $this->assertEquals($input, $test{{ class_name }}->get{{ column.field }}());
{% endfor %}
    }

{% for column in columns %}
{% if 'constraints' in column|keys %}
    /**
    * @depends testGetRandom
    */
    public function testFetch{{ column.field }}Object({{ class_name }}Model ${{ class_name|lower }})
    {
        $this->assertTrue(method_exists(${{ class_name|lower }}, "fetch{{ column.field }}Object"));

        ${{ column.field }}Object = ${{ class_name|lower }}->fetch{{ column.field }}Object();
        $this->assertInstanceOf(
            Models\{{ column.constraints.remote_model_class }}Model::class,
            ${{ column.field }}Object
        );
    }
{% endif %}
{% endfor %}

{% if autoincrement_parameters %}
    public function testAutoincrementedIdIsApplied()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class_name }}TableGateway::class);
        $newMockModel = $table->getNewMockModelInstance();

        // Set primary keys to null.
{% for primary_parameter in autoincrement_parameters %}
        $newMockModel->set{{ primary_parameter }}(null);
{% endfor %}

        // Save the object
        $newMockModel->save();

        // verify that the AI keys have been set.
{% for primary_parameter in primary_parameters %}
        $this->assertNotNull($newMockModel->get{{ primary_parameter }}());
{% endfor %}
    }
{% endif %}

    public function testDestroy()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class_name }}TableGateway::class);
        /** @var Models\{{ class_name }}Model $destroyableModel */
        $destroyableModel = $table->getNewMockModelInstance();
        $destroyableModel->save();
        $this->assertTrue(true, $destroyableModel->destroy());
    }

    public function testDestroyThoroughly()
    {
        /** @var {{ class_name }}TableGateway $table */
        $table = $this->getDIContainer()->get({{ class_name }}TableGateway::class);
        /** @var Models\{{ class_name }}Model $destroyableModel */
        $destroyableModel = $table->getNewMockModelInstance();
        $destroyableModel->save();
        $this->assertGreaterThan(0, $destroyableModel->destroyThoroughly());
    }

{% if related_object %}

{% for related_object in related_objects %}
    /**
     * @depends testNewMockModelInstance
     */
    public function test_RelatedObjects_Fetch{{ related_object.getRemoteFunctionName }}Object({{ class_name }}Model ${{ class_name }})
    {
        // Verify the function exists
        $this->assertTrue(method_exists(${{ class_name }}, "fetch{{ related_object.getRemoteFunctionName }}Object"));

        // Call the function on it
        ${{ class_name }}Model = ${{ class_name }}->fetch{{ related_object.getRemoteFunctionName }}Object();

        $this->assertInstanceOf(Models\{{ class_name }}Model::class, ${{ class_name }}Model);
    }

{% endfor %}
{% endif %}

{% if remote_objects %}
{% for remote_object in remote_objects %}
    /**
     * @depends testNewMockModelInstance
     */
    public function test_RemoteObjects_Fetch{{ remote_object.getLocalFunctionName }}Object({{ class_name }}Model ${{ class_name }})
    {
        // Verify the function exists
        $this->assertTrue(method_exists(${{ class_name }}, "fetch{{ remote_object.getLocalFunctionName }}Object"));

        /** @var TableGateways\{{ remote_object.getLocalFunctionName }}sTableGateway $tableGateway */
        $tableGateway = $this->getDIContainer()->get(TableGateways\{{ remote_object.getLocalFunctionName }}sTableGateway::class);

        ${{ class_name }} = ${{ class_name }}->save();

        /** @var Models\{{ remote_object.getLocalFunctionName }}sModel $newMockModel */
        $newMockModel = $tableGateway->getNewMockModelInstance();
        $newMockModel->set{{ remote_object.getRemoteFunctionName }}Id(${{ class_name }}->getId());
        $newMockModel->save();

        // Call the function on it
        ${{ remote_object.getLocalFunctionName }}Model = ${{ class_name }}->fetch{{ remote_object.getLocalFunctionName }}Object();

        $this->assertInstanceOf(Models\{{ remote_object.getLocalFunctionName }}sModel::class, ${{ remote_object.getLocalFunctionName }}Model);
    }

    /**
     * @depends testNewMockModelInstance
     */
    public function test_RemoteObjects_Fetch{{ remote_object.getLocalFunctionName }}Objects({{ class_name }}Model ${{ class_name }})
    {
        // Verify the function exists
        $this->assertTrue(method_exists(${{ class_name }}, "fetch{{ remote_object.getLocalFunctionName }}Object"));

        /** @var TableGateways\{{ remote_object.getLocalFunctionName }}sTableGateway $tableGateway */
        $tableGateway = $this->getDIContainer()->get(TableGateways\{{ remote_object.getLocalFunctionName }}sTableGateway::class);

        ${{ class_name }} = ${{ class_name }}->save();

        /** @var Models\{{ remote_object.getLocalFunctionName }}sModel $newMockModel */
        $newMockModel = $tableGateway->getNewMockModelInstance();
        $newMockModel->set{{ remote_object.getRemoteFunctionName }}Id(${{ class_name }}->getId());
        $newMockModel->save();

        // Call the function on it
        ${{ remote_object.getLocalFunctionName }}Models = ${{ class_name }}->fetch{{ remote_object.getLocalFunctionName }}Objects();

        $this->assertContainsOnlyInstancesOf(Models\{{ remote_object.getLocalFunctionName }}sModel::class, ${{ remote_object.getLocalFunctionName }}Models);
    }

{% endfor %}
{% endif %}
    public function testGetPropertyMeta()
    {
        $propertyMeta = $this->testInstance->getPropertyMeta();
        $this->assertTrue(is_array($propertyMeta));
        $this->assertGreaterThan(0, count($propertyMeta));
{% for column in columns %}
        $this->assertArrayHasKey('{{ column.getField }}', $propertyMeta);
{% endfor %}
    }

}
