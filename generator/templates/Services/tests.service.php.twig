<?php
namespace {{ namespace }}\Test\Services;

use \{{ app_container }} as App;
use \{{ namespace }}\TableGateways\{{ class_name }}TableGateway;
use \{{ namespace }}\Services\{{ class_name }}Service;
use \{{ namespace }}\Models\{{ class_name }}Model;

class {{ class_name }}Test extends \Segura\AppCore\Test\BaseTestCase
{
    public static function setUpBeforeClass()
    {
        ${{ variable_name }}TableGateway = App::Container()->get({{ class_name }}TableGateway::class);
        parent::setUpBeforeClass();

        for($i = 0; $i <= 5; $i++){
            ${{ variable_name }}TableGateway
                ->getNewMockModelInstance()
                ->save();
        }
    }

    /**
     * @large
     */
    public function testGetAll()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $all = ${{ variable_name }}Service->getAll();
        $this->assertEquals('{{ namespace }}\Models\{{ class_name }}Model', get_class(reset($all)));
    }

    public function testGetRandom()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);

        $random = ${{ variable_name }}Service->getRandom();
        $this->assertEquals(
            '{{ namespace }}\Models\{{ class_name }}Model',
            get_class($random)
        );

        return $random;
    }

    public function testGetMockObject()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertEquals(
            '{{ namespace }}\Models\{{ class_name }}Model',
            get_class(${{ variable_name }}Service->getMockObject())
        );
    }

    /**
     * @depends testGetRandom
     */
    public function testGetByField({{ class_name }}Model $random)
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
{% for column in columns %}
        $found = ${{ variable_name }}Service->getByField('{{ column.field }}', $random->get{{ column.field }}());
        $this->assertEquals(
            '{{ namespace }}\Models\{{ class_name }}Model',
            get_class($found)
        );
{% endfor %}
    }

    public function testGetTermPlural()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertNotEmpty(${{ variable_name }}Service->getTermPlural());
    }

    public function testGetTermSingular()
    {
        ${{ variable_name }}Service = App::Container()->get({{ class_name }}Service::class);
        $this->assertNotEmpty(${{ variable_name }}Service->getTermSingular());
    }
}
