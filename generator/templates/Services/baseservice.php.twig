<?php
namespace {{ namespace }}\Services\Base;

use Segura\AppCore\Abstracts\Service as AbstractService;
use Segura\AppCore\Interfaces\ServiceInterface as ServiceInterface;
use \{{ namespace }}\TableGateways;
use \{{ namespace }}\Models;
use Zend\Db\ResultSet\ResultSet;
use Zend\Db\Sql\Select;

{% include '_overwrite_warning.twig' %}

// @todo: Make all Services implement a ServicesInterface. - MB
abstract class Base{{ class_name }}Service
    extends AbstractService
    implements ServiceInterface
{

    // Related Objects Table Gateways
{% for related_object in related_objects_shared|sort|unique %}
    /** @var TableGateways\{{ related_object.getRemoteClass }}TableGateway */
    protected ${{ related_object.getRemoteVariable }}TableGateway;
{% endfor %}

    // Remote Constraints Table Gateways
{% for remote_constraint in remote_constraints %}
    /** @var TableGateways\{{ remote_constraint.getLocalClass }}TableGateway */
    protected ${{ remote_constraint.getLocalVariable }}TableGateway;
{% endfor %}

    // Self Table Gateway
    /** @var TableGateways\{{ class_name }}TableGateway */
    protected ${{ variable_name }}TableGateway;

    /**
     * Constructor.
     *
{% for related_object in related_objects_shared|sort|unique %}
     * @param TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway
{% endfor %}
{% for remote_constraint in remote_constraints %}
     * @param TableGateways\{{ remote_constraint.getLocalClass }}TableGateway ${{ remote_constraint.getLocalVariable }}TableGateway
{% endfor %}
     * @param TableGateways\{{ class_name }}TableGateway ${{ variable_name }}TableGateway
     */
    public function __construct(
{% for related_object in related_objects_shared|sort|unique %}
        TableGateways\{{ related_object.getRemoteClass }}TableGateway ${{ related_object.getRemoteVariable }}TableGateway,
{% endfor %}
{% for remote_constraint in remote_constraints %}
        TableGateways\{{ remote_constraint.getLocalClass }}TableGateway ${{ remote_constraint.getLocalVariable }}TableGateway,
{% endfor %}
        TableGateways\{{ class_name }}TableGateway ${{ variable_name }}TableGateway
    )
    {
{% for related_object in related_objects_shared|sort|unique %}
        $this->{{ related_object.getRemoteVariable }}TableGateway = ${{ related_object.getRemoteVariable }}TableGateway;
{% endfor %}
{% for remote_constraint in remote_constraints %}
        $this->{{ remote_constraint.getLocalVariable }}TableGateway = ${{ remote_constraint.getLocalVariable }}TableGateway;
{% endfor %}
        $this->{{ variable_name }}TableGateway = ${{ variable_name }}TableGateway;
    }

    public function getNewTableGatewayInstance() : TableGateways\{{ class_name }}TableGateway
    {
        return $this->{{ variable_name }}TableGateway;
    }
    
    public function getNewModelInstance($dataExchange = []) : Models\{{ class_name }}Model
    {
        return $this->{{ variable_name }}TableGateway->getNewModelInstance($dataExchange);
    }

    /**
     * @param int|null $limit
     * @param int|null $offset
     * @param array|null $wheres
     * @param string|null $order
     * @param string|null $orderDirection
     * @return Models\{{ class_name }}Model[]
     */
    public function getAll(
        int $limit = null,
        int $offset = null,
        array $wheres = null,
        string $order = null,
        string $orderDirection = null
    )
    {

        ${{ class_name }}Table = $this->getNewTableGatewayInstance();
        list($all{{ class_name }}s, $count) = ${{ class_name }}Table->fetchAll(
            $limit,
            $offset,
            $wheres,
            $order,
            $orderDirection !== null ? $orderDirection : Select::ORDER_ASCENDING
        );
        $return = [];

        if ($all{{ class_name }}s instanceof ResultSet) {
            foreach ($all{{ class_name }}s as ${{ class_name }}) {
                $return[] = ${{ class_name }};
            }
        }
        return $return;
    }

    /**
     * @param int $id
     * @return Models\{{ class_name }}Model
     * @throws \Segura\AppCore\Exceptions\TableGatewayException
     */
    public function getById(int $id) : Models\{{ class_name }}Model
    {
        ${{ class_name }}Table = $this->getNewTableGatewayInstance();
        return ${{ class_name }}Table->getById($id);
    }

    /**
     * @param string $field
     * @param $value
     * @return Models\{{ class_name }}Model
     * @throws \Segura\AppCore\Exceptions\TableGatewayException
     */
    public function getByField(string $field, $value) : Models\{{ class_name }}Model
    {
        ${{ class_name }}Table = $this->getNewTableGatewayInstance();
        return ${{ class_name }}Table->getByField($field, $value);
    }

    /**
     * @return Models\{{ class_name }}Model
     * @throws \Segura\AppCore\Exceptions\TableGatewayException
     */
    public function getRandom() : Models\{{ class_name }}Model
    {
        ${{ class_name }}Table = $this->getNewTableGatewayInstance();
        return ${{ class_name }}Table->fetchRandom();
    }

    /**
     * @param $dataExchange
     * @return array|\ArrayObject|null
     */
    public function createFromArray($dataExchange)
    {
        ${{ class_name }}Table = $this->getNewTableGatewayInstance();
        ${{ class_name }} = $this->getNewModelInstance($dataExchange);
        return ${{ class_name }}Table->save(${{ class_name }});
    }

    /**
     * @param int $id
     * @return int
     */
    public function deleteByID($id) : int
    {
        ${{ class_name }}Table = $this->getNewTableGatewayInstance();
        return ${{ class_name }}Table->delete(['id' => $id]);
    }

    public function getTermPlural() : string
    {
        return '{{ object_name_plural }}';
    }

    public function getTermSingular() : string
    {
        return '{{ object_name_singular }}';
    }

    /**
     * @returns Models\{{ class_name }}Model
     */
    public function getMockObject()
    {
        return $this->getNewTableGatewayInstance()->getNewMockModelInstance();
    }
}
