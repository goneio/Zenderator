#!/usr/bin/env php
<?php

use PhpSchool\CliMenu\CliMenu;
use PhpSchool\CliMenu\CliMenuBuilder;

$rootOfApp = __DIR__ . "/../../../../";

require_once($rootOfApp . "/bootstrap.php");
ini_set("memory_limit", "256M");

$scope = APP_CORE_NAME;

try {
    $databaseConfigs = $scope::Container()->get("DatabaseConfig");
}catch(\Segura\AppCore\Exceptions\DbConfigException $dbConfigException){
    $databaseConfigs = null;
}

$sdkOutputPath = APP_ROOT . "/vendor/segura/lib" . strtolower(APP_NAME);

$zenderator = new \Zenderator\Zenderator(
    $rootOfApp,
    $databaseConfigs
);

if(!$zenderator->vpnCheck()){
    echo "WARNING! You're not connected to the VPN!\n";
    $zenderator->waitForKeypress();
}

$baseAutomizeName = 'Segura Automizer - ' . APP_NAME;

$menu = (new CliMenuBuilder)
    ->setTitle($baseAutomizeName)
    ->addItem('Run Zenderator', function (CliMenu $menu) use ($zenderator){
        $zenderator
            ->makeZenderator(false)
            ->waitForKeypress();
        $menu->redraw();
    })
    ->addItem('Run SDKifier', function (CliMenu $menu) use ($zenderator, $sdkOutputPath){
        $zenderator
            ->purgeSDK($sdkOutputPath)
            ->checkGitSDK($sdkOutputPath)
            ->makeSDK($sdkOutputPath, false)
            ->runSDKTests($sdkOutputPath)
            ->sendSDKToGit($sdkOutputPath)
            ->waitForKeypress();
        $menu->redraw();
    })
    ->addItem('Purge System of Sin (Rebuild Everything & Clean)', function (CliMenu $menu) use ($zenderator, $sdkOutputPath){
        $zenderator
            ->makeZenderator(false)
            ->makeSDK($sdkOutputPath, false)
            ->cleanCode()
            ->runTests(false)
            ->waitForKeypress();
        $menu->redraw();
    })
    ->addLineBreak('-')
    ->addSubMenu('Tests')
        ->setTitle($baseAutomizeName . ' > Tests')
        ->addItem('Run Tests without Coverage (fast)', function(CliMenu $menu) use ($zenderator){
            $zenderator
                ->runTests(false)
                ->waitForKeypress();
            $menu->redraw();
        })
        ->addItem('Run Tests with Coverage (slow)', function(CliMenu $menu) use ($zenderator){
            $zenderator
                ->runTests(true)
                ->waitForKeypress();
            $menu->redraw();
        })
        ->addItem('Run Tests but Stop on Failure/Error', function(CliMenu $menu) use ($zenderator){
            $zenderator
                ->runTests(true, true)
                ->waitForKeypress();
            $menu->redraw();
        })
        ->end()
    ->addLineBreak('-')
    ->addSubMenu('Composer')
        ->setTitle($baseAutomizeName . ' > Composer')
        ->addItem('Rebuild Composer Autoloader', function(CliMenu $menu) use ($zenderator){
            $zenderator
                ->cleanCodeComposerAutoloader()
                ->waitForKeypress();
            $menu->redraw();
        })
        ->addItem('Update Segura-Specific Dependencies', function(CliMenu $menu) use ($zenderator){
            $zenderator
                ->updateSeguraDependencies()
                ->waitForKeypress();
            $menu->redraw();
        })
        ->end()
    ->addItem('Run Clean', function (CliMenu $menu) use ($zenderator){
        $zenderator
            ->cleanCode()
            ->waitForKeypress();
        $menu->redraw();
    })

    ->addLineBreak('-')
    ->build();

$menu->open();